// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17.subsystems;

import org.usfirst.frc1073.robot17.RobotMap;
import org.usfirst.frc1073.robot17.commands.*;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.AnalogGyro;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class PIDDrive extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro = RobotMap.pIDDrivegyro;
    private final CANTalon leftMotor1 = RobotMap.pIDDriveleftMotor1;
    private final CANTalon leftMotor2 = RobotMap.pIDDriveleftMotor2;
    private final CANTalon leftMotor3 = RobotMap.pIDDriveleftMotor3;
    private final CANTalon rightMotor1 = RobotMap.pIDDriverightMotor1;
    private final CANTalon rightMotor2 = RobotMap.pIDDriverightMotor2;
    private final CANTalon rightMotor3 = RobotMap.pIDDriverightMotor3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final double DEADZONE_VALUE = .05;
    private final double WHEEL_RADIUS = 4.0;
    
    // Initialize your subsystem here
    public PIDDrive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("PIDDrive", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("PIDDrive", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return gyro.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        leftMotor1.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
  public double getLeftRawSpeed() {
	return leftMotor1.getSpeed();
}

public double getLeftRawDistance() {
	return leftMotor1.getPosition();
}

public double getLeftDistanceInches() {
	return getLeftRawDistance() * (WHEEL_RADIUS * 2 * Math.PI);
}

public double getRightRawSpeed() {
	return rightMotor1.getSpeed();
}

public double getRightRawDistance() {
	return rightMotor1.getPosition();
}

public double getRightDistanceInches() {
	return getRightRawDistance() * (WHEEL_RADIUS * 2 * Math.PI);
}

    public double deadzone(double input,double deadzoneVal)
    {
    	if(input <= deadzoneVal && input > 0) input = 0;
    	
    	if(input >= -deadzoneVal && input < 0) input = 0;
    	
    	return input;
    }
    /**Basic drive code:
     * 	-Makes sure left side is inverted and right side isn't
     * 	-Sets non-Motor1 motors as followers
     * 	-Sets non-Motor1 motors to follow their respective side's Motor1
     * 	-Sets Motor1 motors to PercentVbus
     * 	-Sets Motor1 motors to double left and double right, respectively
     **/
    public void basicDrive(double left, double right) {
    	leftMotor1.setInverted(false);
    	leftMotor2.setInverted(false);
    	leftMotor3.setInverted(false);
    	rightMotor1.setInverted(true);
    	rightMotor2.setInverted(true);
    	rightMotor3.setInverted(true);
    	
    	leftMotor2.changeControlMode(CANTalon.TalonControlMode.Follower);
    	leftMotor3.changeControlMode(CANTalon.TalonControlMode.Follower);
    	rightMotor2.changeControlMode(CANTalon.TalonControlMode.Follower);
    	rightMotor3.changeControlMode(CANTalon.TalonControlMode.Follower);
    	
    	leftMotor2.set(leftMotor1.getDeviceID());
    	leftMotor3.set(leftMotor1.getDeviceID());
    	rightMotor2.set(rightMotor1.getDeviceID());
    	rightMotor3.set(rightMotor1.getDeviceID());
    	
    	leftMotor1.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	rightMotor1.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    	
    	leftMotor1.set(deadzone(left,DEADZONE_VALUE));
    	rightMotor1.set(deadzone(right,DEADZONE_VALUE));
    }

}
