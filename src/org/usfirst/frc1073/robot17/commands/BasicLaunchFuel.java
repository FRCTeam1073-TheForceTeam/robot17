// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.robot17.Logger;
import org.usfirst.frc1073.robot17.Robot;
import org.usfirst.frc1073.robot17.RobotMap;

import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

/**
 *
 */
public class BasicLaunchFuel extends Command {
	
	Logger log = new Logger();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public BasicLaunchFuel() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.launcher);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        
    }

    
    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.bling.sendFuelLaunching();
    	
    	RobotMap.launcherlauncherMotor1.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
    	RobotMap.launcherlauncherMotor1.changeControlMode(TalonControlMode.Speed);
    	
    	RobotMap.launcherlauncherMotor1.setP(0.22);
    	RobotMap.launcherlauncherMotor1.setI(0);
    	RobotMap.launcherlauncherMotor1.setD(0.1);
    	
    	
    	
    	log.clear();
    }
    
    // Called repeatedly when this Command is scheduled to run
    @SuppressWarnings("deprecation")
	protected void execute() {
    	double launcherSpeed = 0.8;
    	double conveyorSpeed = -0.8;
    	double rightTriggerAxis = Robot.oi.operatorControl.getRawAxis(3);
    	
    	
    	log.setLog(Double.toString(Math.abs(RobotMap.launcherlauncherMotor1.getSpeed())));
    	
    	if(rightTriggerAxis >= 0.25) {
    		//Robot.launcher.startLauncher(launcherSpeed, conveyorSpeed);
    		//Robot.oi.operatorControl.rumble(0.75);
    		RobotMap.launcherlauncherMotor1.set(SmartDashboard.getNumber("Launcher_Speed"));
    		
    	} else {
    		//Robot.launcher.stopLauncher();
    		//Robot.oi.operatorControl.rumble(0);
    		RobotMap.launcherlauncherMotor1.set(0);
    		
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
