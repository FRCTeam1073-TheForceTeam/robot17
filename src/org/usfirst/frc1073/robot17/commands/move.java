// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1073.robot17.Robot;

/**
 *
 */
public class move extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_dist;
    private final double SPEED = .5;
    private double destination = m_dist*1440;
    private double currentLeft,currentRight,currentSpeed;
    
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public move(double dist) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_dist = dist;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.setPosLeft(0);
    	Robot.driveTrain.setPosRight(0);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	currentLeft = Robot.driveTrain.getLeftPos()*4*Math.PI;
    	currentRight = Robot.driveTrain.getRightPos()*4*Math.PI*-1; //Invert right side
    	
    	if(currentLeft >= destination/2) currentSpeed = SPEED-(((currentLeft/destination)/destination)*.5);
    	else currentSpeed = SPEED;
    	if(currentRight >= destination/2) currentSpeed = SPEED-(((currentLeft/destination)/destination)*.5);
    	else currentSpeed = SPEED;
    	
    	Robot.driveTrain.basicAutoDrive(currentSpeed, currentSpeed);
    	System.out.println("Left: "+Robot.driveTrain.getLeftPos());
    	System.out.println("Right"+Robot.driveTrain.getRightPos());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        //if((Robot.driveTrain.getLeftPos()*4*Math.PI >= destination | (Robot.driveTrain.getRightPos()*-1*4*Math.PI >= destination))) return true;
    	if(currentLeft >= destination | currentRight >= destination) return true;
        //if((Robot.driveTrain.getLeftPos()*(4*Math.PI) >= m_dist) | (Robot.driveTrain.getRightPos()*(4*Math.PI) >= m_dist)) return true;
        else return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.basicAutoDrive(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.driveTrain.basicAutoDrive(0, 0);
    }
}
