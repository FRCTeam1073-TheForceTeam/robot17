// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.robot17.Robot;

/**
 *
 */
public class DriveToBoiler extends Command {
	NetworkTable netTable;
    double xDeltaHG;
    double xWidthHG;
    boolean isPressed = false;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveToBoiler() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        netTable = NetworkTable.getTable("VisionTable");
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	SmartDashboard.putString("done with boiler?", "no");

    	  
    }

    // Called repeatedly when this Command is scheduled to run
	protected void execute() {
    	SmartDashboard.getNumber("xWidthHG", xWidthHG);
    	SmartDashboard.getNumber("xDeltaHG", xDeltaHG);
    	
    	
    	Robot.bling.sendBoilerTargeting();
    	//These are the variables that get manipulated in the code
        
        
        //These are the variables for speed - start slow
        
        double driveSpeed = 0.3;
        double negativeDriveSpeed = -0.3;
		double changeSpeed = 0.1;
		double maxWidth = 48;
		//sets the maximum number of pixels that the pixy can see before it stops
		double positiveError = 12;
		double negativeError = -12;
		//sets the number of pixels of error on either side of center
		double zero = -0.2;
		
		//This is the width of the Pixy
		double imageWidth = 320;
		
		//These are what the Pixy send us
		xDeltaHG =  netTable.getNumber("centerDistHG", 0);
		//distance from center
        xWidthHG =  netTable.getNumber("AverageWidthHG", 0);
        //width of the block that they Pixy sees
        if (xWidthHG > maxWidth)
        {
        	if (xDeltaHG < maxWidth) {
        		Robot.driveTrain.basicDrive(negativeDriveSpeed, zero);
        		SmartDashboard.putString("direction to boiler", "left");
        	}
        	else if (xDeltaHG > maxWidth){
        		Robot.driveTrain.basicDrive(zero, negativeDriveSpeed);

        	if (xDeltaHG > maxWidth) {
        		Robot.driveTrain.basicDrive(negativeDriveSpeed, 0.2);
        		SmartDashboard.putString("direction to boiler", "left");
        	}
        	else if (xDeltaHG > maxWidth){
        		Robot.driveTrain.basicDrive(0.2, negativeDriveSpeed);

        		SmartDashboard.putString("direction to boiler", "right");
        	}
        	else
        	{
        		Robot.driveTrain.basicDrive(negativeDriveSpeed, negativeDriveSpeed);
        		SmartDashboard.putString("direction to boiler", "center");
        	}
        		
        }

        if (xWidthHG < maxWidth)
        {
        	if (xDeltaHG < maxWidth) {
        		Robot.driveTrain.basicDrive(negativeDriveSpeed, zero);
        		SmartDashboard.putString("direction to boiler", "left");
        	}
        	else if (xDeltaHG > maxWidth){
        		Robot.driveTrain.basicDrive(zero, negativeDriveSpeed);
        	}
        else if (xWidthHG < maxWidth)
        {
        	if (xDeltaHG < maxWidth) {
        		Robot.driveTrain.basicDrive(0.2, driveSpeed);
        		SmartDashboard.putString("direction to boiler", "left");
        	}
        	else if (xDeltaHG > maxWidth ){
        		Robot.driveTrain.basicDrive(driveSpeed, .2);

        		SmartDashboard.putString("direction to boiler", "right");
        	}
        	else
        	{
        		Robot.driveTrain.basicDrive(negativeDriveSpeed, negativeDriveSpeed);
        		SmartDashboard.putString("direction to boiler", "center");
        	}
        		
        }
        }
        
        }
        
        
        }
		
    
    
    protected boolean isFinished() {
    	
    	double maxWidth = 48;
		if (xWidthHG >= maxWidth  || isPressed){
    		Robot.driveTrain.basicDrive(0, 0);
    		Robot.oi.driverControl.rumbleTimeRep(1,150,2);
    		SmartDashboard.putString("done with boiler?", "YES!!! :)");
    		return true;
    		
    	}
		else {
			return false;
					
		}
    	
    }
    

    // Make this return true when this Command no longer needs to run execute()
    
    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.basicDrive(0, 0);
    	Robot.bling.sendFuelLaunchReady();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.driveTrain.basicDrive(0, 0);
    	Robot.bling.sendFuelLaunchReady();
    }
}
