// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17.commands;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc1073.robot17.Robot;
import org.usfirst.frc1073.robot17.RobotMap;
import org.usfirst.frc1073.robot17.Logger;
import org.usfirst.frc1073.robot17.OI;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.Preferences;

/**
 *
 */
public class LidarTest0 extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    
	//Set up for the NetworkTable variables the Raspberry Pi sends
	NetworkTable lidarSendTable;
    double LidarDegrees;
    double ultimateMeasurement;
    double robotSpeed;
    
    //Variable for button used in isFinished
    boolean isPressed = false;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public LidarTest0() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        //Sets the correct Network Table to pull from the Pixy
        lidarSendTable = NetworkTable.getTable("LidarSendTable");
    }

    protected void initialize() {
    	
    	
    	SmartDashboard.putString("lidar info", "starting");

    	Robot.bling.sendAutoDone();
    }

    protected void execute() {
    	
    	//These are the variables that get manipulated in the code

        double mmToIn = 1.0;
        SmartDashboard.putNumber("ultimateMeasurement", ultimateMeasurement);
       
        //These are the variables for speed - start slow
		
		//These are what the Pixy send us
        robotSpeed = lidarSendTable.getNumber("RobotSpeed", 0);
        SmartDashboard.putNumber("Ultimate Lidar Measurement", ultimateMeasurement);
        
        Logger.setLog(Double.toString(ultimateMeasurement));
        Logger.setLog(Double.toString(LidarDegrees));
		
		//This code modifies the speed based on how close you are to the peg
        SmartDashboard.putNumber("Lidar Distance" , ultimateMeasurement);
        SmartDashboard.putNumber("Lidar Degrees" , LidarDegrees);
        SmartDashboard.putNumber("Lidar To Inches", ultimateMeasurement/mmToIn);
        
        if (robotSpeed == 0.5){
        	SmartDashboard.putNumber("Robot Speed" , robotSpeed);
        	Robot.driveTrain.basicDrive(0.5, 0.5);
        }
         
        else if (robotSpeed == 0.25){
        	SmartDashboard.putNumber("Robot Speed" , robotSpeed);
        	Robot.driveTrain.basicDrive(0.25, 0.25);
        }
        
        else if (robotSpeed == 0.15){
        	SmartDashboard.putNumber("Robot Speed" , robotSpeed);
        	Robot.driveTrain.basicDrive(0.15, 0.15);
        }
        
        else if (robotSpeed == 0.1){
        	SmartDashboard.putNumber("Robot Speed" , robotSpeed);
        	Robot.driveTrain.basicDrive(0.1, 0.1);
        }
        
        else if (robotSpeed == 0.0){
        	SmartDashboard.putNumber("Robot Speed" , robotSpeed);
        	Robot.driveTrain.basicDrive(0, 0);	
        }
       }
    
    protected boolean isFinished() {
   	
    	
    	
    	//Checks the cancel button for its state
    	isPressed = Robot.oi.cancelAny.get();
    	if (true){
    SmartDashboard.putString("hello_world", "isFinished");
    		return false;
    	}	
    	else {
    		return true;
    	}
    }
    
    protected void end() {
    	//Stops motors and sets bling
    	Robot.driveTrain.basicDrive(0, 0);
    	Robot.bling.sendRemoveGear();
    }

    protected void interrupted() {
    	//Stops motors and sets bling
    	Robot.driveTrain.basicDrive(0, 0);
    	SmartDashboard.putString("lidar info", "Interrupted");
    	Robot.bling.sendRemoveGear();
    }
}
