// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.robot17.Robot;
import org.usfirst.frc1073.robot17.RobotMap;
import org.usfirst.frc1073.robot17.subsystems.*;
import edu.wpi.first.wpilibj.Preferences;

/**
 *
 */
public class AlignAndLaunch extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AlignAndLaunch() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	
    	boolean isPressed = Robot.oi.cancelAny.get();
    	
    	if (isPressed == true){
    	Robot.endAll  = true;
    	}
    	else{
    	SmartDashboard.putString("AutoRunning", "True");
    	addParallel (new SpinLauncherAuto());
    	addSequential(new DriveToBoilerAuto());
    	//double moveInchesPID = 15;
    	//moveInchesPID = Robot.robotPreferences.getDouble("moveInchesPID", 15);
    	//addSequential(new moveWithPID(moveInchesPID));
    	SmartDashboard.putString("Collect", "False");
//    	addParallel (new CollectFuel());
    	SmartDashboard.putString("Collect", "True");
    	SmartDashboard.putString("Conveyor", "False");
    	addParallel (new SpinConveyorAuto());
    	
    	addSequential (new CollectFuelAuto());
    	SmartDashboard.putString("Conveyor", "True");
    	
    	SmartDashboard.putString("Launch", "True");
    	
    	
    	try {
			Thread.sleep(500);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	SmartDashboard.putString("Collect", "False");
    	SmartDashboard.putString("Conveyor", "False");
    	SmartDashboard.putString("Launch", "False");
    	SmartDashboard.putString("AutoRunning", "False");
    }

	
}
}
