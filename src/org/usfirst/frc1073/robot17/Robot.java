// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.robot17;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.internal.HardwareTimer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.opencv.core.Core;


import org.usfirst.frc1073.robot17.commands.*;
import org.usfirst.frc1073.robot17.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    Command matchTypeCommand;
    public static Preferences robotPreferences;
    public static String starttime;
    boolean blueAlliance = false;
    boolean redAlliance = false;
    public static DriveModes driveMode = DriveModes.PID;
    
    
    public static boolean isOrientationSwitched = false;
    
    public static boolean selectedCamera = false;
    
    public static OI oi;
    public static Bling bling;
    public static String robotName;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Launcher launcher;
    public static Collector collector;
    public static Climber climber;
    public static LEDs lEDs;
    public static Agitator agitator;
    public static Conveyor conveyor;
    public static GearCollector gearCollector;
    public static CameraSwitcher cameraSwitcher;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**Adding sendable choosers**/
    public static SendableChooser<CommandGroup> autonomousChooserWorld;
    public static SendableChooser<Command> matchTypeChooser;
    public static SendableChooser<Boolean> allianceChooser;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	SmartDashboard.putString("RobotInitBegin", "true");
    	RobotMap.init();
    	robotPreferences = Preferences.getInstance();
    	robotName = robotPreferences.getString("robotName", "unknown");
    	starttime = new SimpleDateFormat("MM/dd/YY-HH:mm").format(Calendar.getInstance().getTime());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        launcher = new Launcher();
        collector = new Collector();
        climber = new Climber();
        lEDs = new LEDs();
        agitator = new Agitator();
        conveyor = new Conveyor();
        gearCollector = new GearCollector();
        cameraSwitcher = new CameraSwitcher();
        
        if (OI.matchType == "Competitive")
        {
        	OI.competitiveMatch += 1;
        }
        if (OI.matchType == "Practice")
        {
        	OI.practiceMatch += 1;
        }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        //Instantiating Bling Class for smartbling on Robot.
        bling = new Bling();
        bling.sendRobotInit();
        
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        //Resets gyro
        //RobotMap.headingGyro.reset();
        //Calibrates the gyro
        //RobotMap.headingGyro.calibrate();
        
        /**Autonomous chooser**/
        autonomousChooserWorld = new SendableChooser<CommandGroup>();
        autonomousChooserWorld.addDefault("Do Nothing", null);
        autonomousChooserWorld.addObject("Cross Only", new AutonomousCross());
        autonomousChooserWorld.addObject("Gear Left", new AutonomousBlueGear1());
        autonomousChooserWorld.addObject("Gear Middle", new AutonomousBlueGear2());
        autonomousChooserWorld.addObject("Gear Right", new AutonomousBlueGear3());
        autonomousChooserWorld.addObject("Gear Left + Boiler", new AutonomousBlueGear1Fuel());
        autonomousChooserWorld.addObject("Gear Middle + Left Boiler", new AutonomousBlueGear2Fuel());
        autonomousChooserWorld.addObject("Gear Middle + Right Boiler", new AutonomousRedGear2Fuel());
        autonomousChooserWorld.addObject("Gear Right + Boiler", new AutonomousBlueGear3Fuel());
        autonomousChooserWorld.addObject("Gear Left + Neutral", new AutonomousBlueGear1PlusFlee());
        autonomousChooserWorld.addObject("Gear Middle + Left Neutral", new AutonomousRedGear2Neutral());
        autonomousChooserWorld.addObject("Gear Middle + Right Neutral", new AutonomousBlueGear2Neutral());
        autonomousChooserWorld.addObject("Gear Right + Neutral", new AutonomousBlueGear3PlusFlee());
        //autonomousChooserWorlds.addObject("TEST FOR BOILER", new AlignAndLaunch());
        
        
        //MatchType Chooser
        matchTypeChooser = new SendableChooser<Command>();
        matchTypeChooser.addDefault("Practice", new MatchTypeChange(0));
        matchTypeChooser.addObject("Competitive", new MatchTypeChange(1));
        matchTypeChooser.addObject("Don't Log", new MatchTypeChange(3));
        SmartDashboard.putData("Reset Log", new MatchTypeChange(2));
        
        
        
     /*   autonomousChooser.addObject("Red Gear Left", new AutonomousRedGear1());
          autonomousChooser.addObject("Red Gear Middle", new AutonomousRedGear2());
          autonomousChooser.addObject("Red Gear Right", new AutonomousRedGear3());
     */ 
        //autonomousChooser.addObject("Red Gear 1 Fuel", new AutonomousRedGear1Fuel());
        //autonomousChooser.addObject("Red Gear 2 Fuel", new AutonomousRedGear2Fuel());
        //autonomousChooser.addObject("Red Gear 3 Fuel", new AutonomousRedGear3Fuel());
        SmartDashboard.putData("Autonomous Chooser(World)", autonomousChooserWorld);
        SmartDashboard.putData("MatchType Chooser(Worlds)", matchTypeChooser);
        
        
        Thread speedThread = new Thread(() -> {
        	while( !Thread.interrupted() ) {
        		SmartDashboard.putNumber("Right Encoder", -RobotMap.driveTrainrightMotor3.getEncVelocity());
        		SmartDashboard.putNumber("Left Encoder", RobotMap.driveTrainleftMotor3.getEncVelocity());
        		SmartDashboard.putNumber("Gyro Angle", RobotMap.headingGyro.getAngle());
        	}
        });
        
        Thread proxThread = new Thread(() -> {
        	double backProximity = 0;   
        	double voltage;
        	double reciprocal;
        	int i;
        	double[] proxArray;
        	proxArray = new double[10];
        	double averageVoltage = 0;
        	i = 0;
        	SmartDashboard.putNumber("BackDistance", 0);
        	while( !Thread.interrupted() ) {
        		try {
					Thread.sleep(20);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		voltage =  RobotMap.driveTrainProximitySensorBack.getVoltage();
            	reciprocal = 0.00126675995064 * Math.pow(voltage, 4) + -0.00823083172345 * Math.pow(voltage, 3) + 0.02292474310105 * Math.pow(voltage, 2) + 0.01747977657017 * voltage + 0.00285999025946;
            	proxArray[i] = voltage;
            	i = i + 1;
            	if (i > 9){
            		i = 0;
            	}
            	for (int x=0; x < 10; x++){
            		averageVoltage = averageVoltage + proxArray[x];
            	}
            	averageVoltage = averageVoltage / 10;
            	reciprocal = 0.00126675995064 * Math.pow(averageVoltage, 4) + -0.00823083172345 * Math.pow(averageVoltage, 3) + 0.02292474310105 * Math.pow(averageVoltage, 2) + 0.01747977657017 * averageVoltage + 0.00285999025946;
            	backProximity = 1 / reciprocal;
            	backProximity = backProximity / 2.54;
            	backProximity = Math.round(backProximity);
            	SmartDashboard.putNumber("BackDistance", -backProximity);
            	SmartDashboard.putNumber("BackDistance#", backProximity);
            	//Gear sensor
            	if(RobotMap.driveTrainGearSensor.getVoltage() < 1.0){
            		SmartDashboard.putString("GearIn", "Out");
            	}else{
            		SmartDashboard.putString("GearIn", "In");
            	}
            	
            
            }
        	
        });
        
        /** Instantiate a the camera server for both USB webcams in a separate thread **/
        /*Thread cameraThread = new Thread(() -> {        	
            // 640, 480
            // 320, 240
            // 160, 120
      
        	
            UsbCamera camera1 = CameraServer.getInstance().startAutomaticCapture(0);            
            camera1.setResolution(320, 240);
            camera1.setFPS(20);
            
            // ksthilaire - 042717 - commented out declaration for camera 2 that has been removed
            //UsbCamera camera2 = CameraServer.getInstance().startAutomaticCapture(1);
            //camera2.setResolution(320, 240);
            //camera2.setFPS(20);
            try {
				Thread.sleep(20);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            CvSink cvSink = CameraServer.getInstance().getVideo(camera1);
            CvSource outputStream = CameraServer.getInstance().putVideo("Video", 320, 240);
            Mat source = new Mat();
            //Mat flipped = new Mat();

            boolean currentCamera = selectedCamera;
            while( !Thread.interrupted() ) {
            	// We support two cameras, so the selectedCamera is a boolean to toggle
            	// between camera1 and camera2
            	if ( currentCamera != selectedCamera ) {
            		currentCamera = selectedCamera;
	            	if ( selectedCamera == false ) {
	            		// Set the source to camera1
	            		cvSink.setSource(camera1);            		
	                	SmartDashboard.putString("Camera", "Camera 1");
// ksthilaire - 042717 - commented out reference to camera 2 that has been removed
//	            	} else {
//	            		// Set the source to camera2
//	            		cvSink.setSource(camera2);
//	                	SmartDashboard.putString("Camera", "Camera 2");
	            	}
            	}
            	
            	//Grab image from the source camera
            	cvSink.grabFrame(source);
            	
            	// if there was an image collected, then send it to the dashboard via
            	// the output stream
            	if ( source.empty() == false ) {
            		int rows = source.rows();
            		int columns = source.cols();
            		
            		// flip the image 180 degrees around the center of the image
            		//Point center = new Point(rows/2, columns/2);
            		//Mat mapMatrix = Imgproc.getRotationMatrix2D(center, 180, 1.0);
            		//Imgproc.warpAffine(source,  flipped,  mapMatrix, source.size(), Imgproc.INTER_LINEAR);
            		
            		// draw red cross-hairs on the image to help the drive team
            		// line up with the center of the image
            		Point lineStart = new Point(columns/2, 0);
            		Point lineEnd = new Point(columns/2, rows);
            		Imgproc.line(source, lineStart, lineEnd, new Scalar(0,0,255), 1);
            		
            		lineStart = new Point(0,rows/2);
            		lineEnd = new Point(columns, rows/2);
            		Imgproc.line(source, lineStart, lineEnd, new Scalar(0,0,255), 1);
            		
            		outputStream.putFrame(source);
            	}
            	
            	try{
            		// pause for 50ms to make sure that the thread yields CPU
            		Thread.sleep(50);
            	} catch(Exception e) {           		
            	}
            	
            }
        });
        
        cameraThread.start();*/;
        proxThread.start();
        speedThread.start();
        SmartDashboard.putString("RobotInitFINISH", "true");
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     * 
     */
    public void disabledInit() {
    	//Notify the Driver and operator that the match has finished
    		Robot.oi.driverControl.rumbleTimeRep(1, 200, 2);
        	Robot.oi.operatorControl.rumbleTimeRep(1, 200, 2);
        	
        	double motorRampRate = 0;
            
            RobotMap.driveTrainleftMotor3.setVoltageRampRate(motorRampRate);
            RobotMap.driveTrainrightMotor3.setVoltageRampRate(motorRampRate);
    }
    
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }
    
    public void autonomousInit() {
    	matchTypeCommand = matchTypeChooser.getSelected();
        if (matchTypeCommand != null) matchTypeCommand.start();
        // schedule the autonomous command (example)
    	autonomousCommand = autonomousChooserWorld.getSelected();
    	//autonomousCommand = new AutonomousBlueGear3();
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	
    	double motorRampRate = 0;
        motorRampRate = Robot.robotPreferences.getDouble("motorRampRate", 0);
        RobotMap.driveTrainleftMotor3.setVoltageRampRate(motorRampRate);
        RobotMap.driveTrainrightMotor3.setVoltageRampRate(motorRampRate);
    	
    	Robot.bling.disableLeds();
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.oi.driverControl.rumbleTimeRep(1, 100, 3);
        Robot.oi.operatorControl.rumbleTimeRep(1, 100, 3);
        
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        Thread timerThread = new Thread(() -> {
         	//HardwareTimer matchTimer = new HardwareTimer();
         	//matchTimer.delay(120);
    		 System.out.println("PrintR");
         	try {
 				Thread.sleep(120000);
 			} catch (InterruptedException e) {
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 			}
         	//}catch(InterruptedException e)
         	System.out.println("PrintY");
         	bling.sendEndgame();
         	try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
         	System.out.println("PrintX");
         	
         	//matchTimer.delay(3);
         	bling.sendOff();
         });
         timerThread.start();

     	isOrientationSwitched = false;
    	Robot.driveTrain.isPrecision = false;

    }


    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
}
